{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { User } from '../models/User';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.urlEndPoint = `${environment.URL_LOGIN}/oauth/token`;\n    }\n    get user() {\n      if (this._user != null) {\n        return this._user;\n      } else if (this._user == null && sessionStorage.getItem('user') != null) {\n        this._user = JSON.parse(sessionStorage.getItem('user'));\n        return this._user;\n      }\n      return new User();\n    }\n    get token() {\n      if (this._token != null) {\n        return this._token;\n      } else if (this._token == null && sessionStorage.getItem('token') != null) {\n        this._token = sessionStorage.getItem('token');\n        return this._token;\n      }\n      return null;\n    }\n    login(user) {\n      const credenciales = btoa('angularapp' + ':' + 'CF1p1092$#');\n      const httpHeaders = new HttpHeaders({\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: 'Basic ' + credenciales\n      });\n      const params = new URLSearchParams();\n      params.set('grant_type', 'password');\n      params.set('username', user.email);\n      params.set('password', user.password);\n      return this.http.post(this.urlEndPoint, params.toString(), {\n        headers: httpHeaders\n      });\n    }\n    saveUser(accessToken) {\n      const payload = this.getTokenData(accessToken);\n      this._user = new User();\n      this._user.firstName = this.getNormalizePayload(payload.first_name);\n      this._user.lastName = this.getNormalizePayload(payload.last_name);\n      this._user.email = payload.email;\n      this._user.roles = payload.authorities; /* Nombre athoriries que genera sprint security oauth2*/\n      this._user.id = payload.id;\n      sessionStorage.setItem('user', JSON.stringify(this._user)); /* Se convierte el objeto pages a string con JSON.stringify */\n    }\n    saveToken(accessToken) {\n      this._token = accessToken;\n      sessionStorage.setItem('token', accessToken);\n    }\n    getTokenData(accessToken) {\n      if (accessToken != null) {\n        return JSON.parse(atob(accessToken.split('.')[1]));\n      }\n      return null;\n    }\n    isAuthenticated() {\n      const payload = this.getTokenData(this.token);\n      return payload != null && payload.email && payload.email.length > 0;\n    }\n    hasRole(role) {\n      return this.user.roles.includes(role);\n    }\n    logout() {\n      this._token = null;\n      this._user = null;\n      sessionStorage.clear();\n    }\n    getNormalizePayload(payload) {\n      return payload.replace(\"Ã±\", \"ñ\");\n    }\n    static #_ = (() => this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}