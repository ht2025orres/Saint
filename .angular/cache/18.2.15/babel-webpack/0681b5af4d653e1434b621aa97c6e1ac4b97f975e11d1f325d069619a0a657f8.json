{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\n/** Pass untouched request through to the next request handler. */\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n    intercept(req, next) {\n      return next.handle(req).pipe(catchError(e => {\n        if (e.status === 401) {\n          if (this.authService.isAuthenticated()) {\n            this.authService.logout();\n          }\n          this.router.navigate(['/login']);\n        }\n        if (e.status === 403) {\n          Swal.fire('Error de permiso', 'Acceso denegado', 'warning');\n          this.router.navigate(['/dashboard']);\n        }\n        return throwError(e);\n      }));\n    }\n    static #_ = (() => this.ɵfac = function AuthInterceptor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    }))();\n  }\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}